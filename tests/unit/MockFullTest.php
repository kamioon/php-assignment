<?php

declare(strict_types=1);

namespace Tests\unit;

use Dotenv\Dotenv;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\TestCase;
use SocialPost\Client\FictionalClient;
use SocialPost\Driver\FictionalDriver;
use SocialPost\Dto\FetchParamsTo;
use SocialPost\Hydrator\FictionalPostHydrator;
use SocialPost\Service\SocialPostService;
use Statistics\Builder\ParamsBuilder;
use Statistics\Calculator\Factory\StatisticsCalculatorFactory;
use Statistics\Enum\StatsEnum;
use Statistics\Extractor\StatisticsToExtractor;
use Statistics\Service\StatisticsService;

/**
 * Class ATestTest
 *
 * @package Tests\unit
 */
final class MockFullTest extends TestCase
{

    private Client $client;
    private MockHandler $mock;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated

        $dotEnv = Dotenv::createImmutable(__DIR__ . '/../../');
        $dotEnv->load();

        $tokenData = trim(file_get_contents(__DIR__ . "/../data/auth-token-response.json"));
        $postData = trim(file_get_contents(__DIR__ . "/../data/social-posts-response.json"));

        $responses = [
            new Response(200,
                ['Content-Type' => 'application/json'],
                $tokenData
            ),
            new Response(200,
                ['Content-Type' => 'application/json'],
                $postData
            ),
        ];

        $this->mock = new MockHandler($responses);
        $handler = HandlerStack::create($this->mock);
        $this->client = new Client(['handler' => $handler]);

    }

    /**
     * @test
     */
    public function testSocialPostService(): void
    {

        $fictionalClient = new FictionalClient($this->client, $_ENV["FICTIONAL_SOCIAL_API_CLIENT_ID"]);
        $driver = new FictionalDriver($fictionalClient);

        $hydrator = new FictionalPostHydrator();
        $socialPostService = new socialPostService($driver, $hydrator);

        $calculatorFactory = new StatisticsCalculatorFactory();
        $statisticsService = new StatisticsService($calculatorFactory);

        $fetchParams = new FetchParamsTo(1, 1);
        $posts = $socialPostService->fetchPosts($fetchParams);

        $params = ParamsBuilder::reportStatsParams((new \DateTime("2018-08-01")));
        $stats = $statisticsService->calculateStats($posts, $params);

        $extractor = new StatisticsToExtractor();

        $results = $extractor->extract($stats, [
            StatsEnum::TOTAL_POSTS_PER_WEEK => 'Total posts split by week',
            StatsEnum::AVERAGE_POST_NUMBER_PER_USER => 'Average number of posts per user in a given month',
            StatsEnum::AVERAGE_POST_LENGTH => 'Average character length/post in a given month',
            StatsEnum::MAX_POST_LENGTH => 'Longest post by character length in a given month',
        ]);

        foreach ($results['children'] as $child) {

            if ($child['name'] == StatsEnum::AVERAGE_POST_LENGTH)
                $this->assertEquals(495.25, $child['value']);

            if ($child['name'] == StatsEnum::MAX_POST_LENGTH)
                $this->assertEquals(638, $child['value']);

            if ($child['name'] == StatsEnum::AVERAGE_POST_NUMBER_PER_USER)
                $this->assertEquals(1, $child['value']);

            if ($child['name'] == StatsEnum::TOTAL_POSTS_PER_WEEK)
                $this->assertEquals(4, $child['children'][0]['value']);

        }


    }


}
