<?php

declare(strict_types=1);

namespace Tests\unit;

use PHPUnit\Framework\TestCase;
use SocialPost\Dto\SocialPostTo;
use Statistics\Builder\ParamsBuilder;
use Statistics\Calculator\MaxPostLength;
use Statistics\Calculator\TotalPostsPerUserPerMonth;
use Statistics\Dto\ParamsTo;
use Statistics\Enum\StatsEnum;

/**
 * Class ATestTest
 *
 * @package Tests\unit
 */
class StatisticsTest extends TestCase
{

    private $postData;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $postData = trim(file_get_contents(__DIR__ . "/../data/social-posts-response.json"));
        $this->postData = json_decode($postData)->data->posts;
    }

    /**
     * @test
     */
    public function testTotalPostsPerUserPerMonth(): void
    {
        $params = new ParamsTo();

        $dateTime = new \DateTime("2018-08-10");

        foreach (ParamsBuilder::reportStatsParams($dateTime) as $paramsTo) {
            if ($paramsTo->getStatName() == StatsEnum::AVERAGE_POST_NUMBER_PER_USER) {
                $params = $paramsTo;
                break;
            }
        }

        $calculator = new TotalPostsPerUserPerMonth();
        $calculator->setParameters($params);

        foreach ($this->postData as $post) {

            $socialPostTo = (new SocialPostTo())
                ->setId($post->id ?? null)
                ->setAuthorId($post->from_id ?? null)
                ->setAuthorName($post->from_name ?? null)
                ->setText($post->message ?? null)
                ->setType($post->type ?? null)
                ->setDate($post->created_time ? new \DateTime($post->created_time) : null);

            $calculator->accumulateData($socialPostTo);
        }

        $this->assertEquals(1, $calculator->calculate()->getValue());

    }

    /**
     * @test
     */
    public function testMaxPostLengthValidDate(): void
    {
        $this->assertEquals(638, $this->getMaxPostLength("2018-08-10"));
    }

    /**
     * @test
     */
    public function testMaxPostLengthNotRangeDate(): void
    {
        $this->assertEquals(0, $this->getMaxPostLength("2021-11-10"));
    }

    public function getMaxPostLength($date): ?float
    {
        $params = new ParamsTo();

        $dateTime = new \DateTime($date);

        foreach (ParamsBuilder::reportStatsParams($dateTime) as $paramsTo) {
            if ($paramsTo->getStatName() == StatsEnum::MAX_POST_LENGTH) {
                $params = $paramsTo;
                break;
            }
        }

        $calculator = new MaxPostLength();
        $calculator->setParameters($params);

        foreach ($this->postData as $post) {

            $socialPostTo = (new SocialPostTo())
                ->setId($post->id ?? null)
                ->setAuthorId($post->from_id ?? null)
                ->setAuthorName($post->from_name ?? null)
                ->setText($post->message ?? null)
                ->setType($post->type ?? null)
                ->setDate($post->created_time ? new \DateTime($post->created_time) : null);

            $calculator->accumulateData($socialPostTo);
        }

        return $calculator->calculate()->getValue();
    }
}
